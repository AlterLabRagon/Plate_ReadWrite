rm(list = ls())
# what does this do?
closeAllConnections()
library(systemsseRology) 
library(ropls)
library(ggplot2)
library(RColorBrewer)
library(dplyr)
library(tidyr)
library(readxl)

library(pheatmap)
library(matrixStats)
library(ggraph)
library(igraph)
library(corrr)
library(stringr)
library(tidyverse)
library("ggplot2")
library("ggpubr")
library("ggsci")
library(stringr)

source('/Users/maanasa/Downloads/correlation_network_rev.R')

##############################################################
# read data
file_path <-  '/Users/maanasa/Downloads/20220608 RSV kids.xlsx'
data <- as.data.frame(read_excel(file_path, sheet  = 'All'))
str(data)

# split ID column by last "-"
spl <- strsplit(as.character(data$ID), "-")
patient_ID <- sapply(lapply(spl, head, -1), paste, collapse="-")
print(patient_ID)

# combine the patient_ID column with the data file
data <- cbind(patient_ID,data)

# manually fix some delimiter exceptions
data$patient_ID[1:36] <- data$ID[1:36] # controls don't have multiple time points
data$patient_ID[387:418] <- c("OP-BR-NCH-2","OP-BR-NCH-24","OP-BR-NCH-24","OP-BR-NCH-29","OP-BR-NCH-29","OP-BR-NCH-2","OP-BR-NCH-36","OP-BR-NCH-36","OP-BR-NCH-41","OP-BR-NCH-41","OP-BR-NCH-6","OP-BR-NCH-60","OP-BR-NCH-60","OP-BR-NCH-61","OP-BR-NCH-62","OP-BR-NCH-63","OP-BR-NCH-64","OP-BR-NCH-66","OP-BR-NCH-6","OP-BR-NCH-7","OP-BR-NCH-70","OP-BR-NCH-71","OP-BR-NCH-71","OP-BR-NCH-71","OP-BR-NCH-75","OP-BR-NCH-75","OP-BR-NCH-76","OP-BR-NCH-76","OP-BR-NCH-76","OP-BR-NCH-7","OP-BR-NCH-8","OP-BR-NCH-8")
data$patient_ID[37:49] <- c("BR-NCH-1172","BR-NCH-1172","BR-NCH-1204","BR-NCH-1204","BR-NCH-1205","BR-NCH-1205","BR-NCH-1205","BR-NCH-1209","BR-NCH-1209","BR-NCH-1209","BR-NCH-1216","BR-NCH-1216","BR-NCH-1216")

# group by patient_ID and remove controls
edited_pt_data <- data %>% group_by(patient_ID) %>% filter(Status == "RSV")

# take log of all features aside from AD__ assays (isn't this a bit problematic for LASSO?)
math_edited_pt_data <- edited_pt_data[,29:ncol(edited_pt_data)] #converting it into a math matrix
math_edited_pt_data[,-which(grepl("AD",colnames(math_edited_pt_data)))] <- log10(math_edited_pt_data[,-which(grepl("AD",colnames(math_edited_pt_data)))])
other_pt_data <- edited_pt_data[,1:28]
edited_pt_data <- cbind(other_pt_data,math_edited_pt_data)

#' computing delta by dividing final - initial / initial
pt_data_deltas <- edited_pt_data %>% complete(Time_point = c("D1", "D30", "D180")) %>% mutate(across(c(28:222), ~ ((.x - first(.x)) / first(.x)), .names = "{col}_delta"))
#' computing auc (each time point is compared to D1)
pt_data_auc <- edited_pt_data %>% complete(Time_point = c("D1","D30","D180")) %>% mutate(across(c(28:222), ~(.x - first(.x)), .names = "{col}_auc"))
pt_data_aucs_D1 <- filter(pt_data_auc,Time_point == "D1")
pt_data_aucs_D30 <- filter(pt_data_auc,Time_point == "D30")
pt_data_aucs_D180 <- filter(pt_data_auc,Time_point == "D180")
#aucs_D30 <- pt_data_aucs_D30 %>% mutate(across(c(224:ncol(pt_data_aucs_D30)),~(29 * .x),.names = "{col}"))
#aucs_D1 <- pt_data_aucs_D1 %>% mutate(across(c(224:ncol(pt_data_aucs_D30)),~(0 * .x),.names = "{col}")) 
#aucs_D180 <- pt_data_aucs_D180 %>% mutate(across(c(224:ncol(pt_data_aucs_D30)),~(179 * .x),.names = "{col}"))
# old is gold why?
aucs_D30 <- pt_data_aucs_D30 %>% mutate(across(c(223:416),~(.x * 29),.names = "{col}")) 
aucs_D1 <- pt_data_aucs_D1 %>% mutate(across(c(223:416),~(0 * .x),.names = "{col}")) 
aucs_D180 <- pt_data_aucs_D180 %>% mutate(across(c(223:416),~(179 * .x),.names = "{col}")) 
p_data_aucs <- rbind(aucs_D1,aucs_D30)
p_data_aucs <- rbind(p_data_aucs,aucs_D180)
print(dim(p_data_aucs))

# Repeat the same for deltas
pt_data_delta_D1 <- filter(pt_data_deltas,Time_point == "D1")
pt_data_delta_D30 <- filter(pt_data_deltas,Time_point == "D30")
pt_data_delta_D180 <- filter(pt_data_deltas,Time_point == "D180")
p_data_deltas <- rbind(pt_data_delta_D1,pt_data_delta_D30)
p_data_deltas <- rbind(p_data_deltas,pt_data_delta_D180)

# Drop na 
edited_p_data_aucs <- drop_na(p_data_aucs,all_of(c(29:50)))
edited_p_data_deltas <- drop_na(p_data_deltas,all_of(c(29:50)))
print(dim(edited_p_data_aucs))
print(dim(edited_p_data_deltas))

#' Select columns and cbind them
p_data_aucs1 <- edited_p_data_aucs %>% select(ends_with("_auc"))
p_data_deltas1 <- edited_p_data_deltas %>% select(ends_with("_delta"))
p_data_additions <- cbind(p_data_deltas1,p_data_aucs1)
p_data_additions <- p_data_additions %>% subset(,-196)

#' Fill in missing metadata later ### edited_pt_data <- group_by_(patient_ID) %>%  !!!!
#' 3:28 should be equal when patient_ID is equal
edited_pt_data1 <- edited_pt_data %>% group_by(patient_ID) %>% mutate(across(c(6:27),~(first(.x)),.names = "{col}"))
edited_pt_dataD1 <- filter(edited_pt_data1,Time_point == "D1")
edited_pt_dataD30 <- filter(edited_pt_data1,Time_point == "D30")
edited_pt_dataD180 <- filter(edited_pt_data1,Time_point == "D180")
edited_pt_data_ <- rbind(edited_pt_dataD1,edited_pt_dataD30)
edited_pt_data_ <- rbind(edited_pt_data_,edited_pt_dataD180)



# Combine meta data with deltas and aucs
combined_data_features <- cbind(edited_pt_data_[,],p_data_additions)
# Remove the repeated patient_IDs column
combined_data_features <- combined_data_features[,-29]
# Rename the patient_IDs column
names(combined_data_features)[names(combined_data_features) == 'patient_ID...1'] <- 'patient_ID'

# Select RSV only data
RSV_data <- combined_data_features %>% filter(Status == 'RSV')
RSV_data <- RSV_data[,-223] # Remove the additional patient ID column - 223
##################################################################

#RSV_data <- combined_data_features %>% filter(Status == 'RSV') # Only RSV data
RSV_data_raw <- RSV_data
RSV_data_deltas <- RSV_data %>% select(colnames(RSV_data)[1:28],ends_with("_delta"))
RSV_data_aucs <- RSV_data %>% select(colnames(RSV_data)[1:28],ends_with("_auc"))
RSV_data_RSV_alone <- RSV_data %>% select(colnames(RSV_data)[1:28],contains("RSV"))

RSV_raw <- RSV_data_raw[,1:222]  
RSV_deltas <- RSV_data_deltas[,]  
RSV_aucs <- RSV_data_aucs[,]  
RSV_alone <- RSV_data_RSV_alone[,1:82]   

RSV_data.list <- list(RSV_raw,RSV_deltas,RSV_aucs,RSV_alone)
# RSV_data.list <- list(RSV_data_raw,RSV_data_deltas,RSV_data_aucs) --> did previously

source('/Users/maanasa/Downloads/select_lasso_rev.R')
source('/Users/maanasa/Downloads/select_repeat_rev.R')


# Run deltas and aucs without 'D1'
# Run D1 with everything else

# REmoving 20,21,

# Parameters to change and loop over
colresponse_list <- c(20,21,24) # Removed 20, 21
nfold_list <- c(5,7,10) # Removed 7, 10
lassothresh_list <- c(.8)
feature_list <- list()
accuracy_list <- list()
i = 1
Time_point_list <- c('D1','D30','D180')
### enter this manually data_list <- c(RSV_data_raw,RSV_data_deltas,RSV_data_aucs) 
  
  for (nfold in nfold_list) {
    for (idx in c(1)){ # Removed 1,2,3
      for (colresponse in colresponse_list){
        for (Time in Time_point_list) {
          for (thresh in lassothresh_list){
            featuretype <- c('raw','delta','auc','RSV_alone')
            levels_list <- list(c('A','B'),c('Inpatient','Outpatient'),c('Ward','PICU', 'Outpatient'))
            if (colresponse == 20) {lvl <- levels_list[[1]]}
            if (colresponse == 21) {lvl <- levels_list[[2]]}
            if (colresponse == 24) {lvl <- levels_list[[3]]}
            
            RSV_data_ <- RSV_data.list[[idx]]
            RSV_data_ <- RSV_data_ %>% filter(Time_point == Time)
            responsename <- colnames(RSV_data)[colresponse]
            print(paste0('Response name is ',responsename))
            if (length(which(is.na(RSV_data_[,colresponse]))) != 0) 
            {RSV_data_ <- RSV_data_[-which(is.na(RSV_data_[,colresponse])),]}
            RSV_data_2 <- drop_na(RSV_data_,all_of(c(29:ncol(RSV_data_))))
            print(paste('RSV Dimensions after removing NaNs: ',dim(RSV_data_2)))
            print(paste('RSV Dimensions after Time selection: ',dim(RSV_data_2)))
            print(paste0('Column response is ',colresponse))
            
            y_example <- as.matrix(RSV_data_2[,colresponse])
            y_ <- factor(as.character(y_example),levels=c(unique(y_example)[1], unique(y_example)[2], unique(y_example)[3]))
            #y_ <- factor(RSV_data_[,c(colresponse)], levels = lvl)
            #y_ <- factor(select(RSV_data_,colresponse), levels = lvl) # Getting the Y values
            #y_1 <- factor(RSV_data_[,colresponse], levels = lvl)
            #y_2 <- factor(RSV_data_$responsename, levels = lvl)
            #y_3 <- select(which(X_,))
            print(paste('Current parameters are : ',thresh,nfold,colresponse,Time,idx))
            print(paste('Y Dimensions: ',length(y_)))
            X_ <- as.matrix(as.data.frame(lapply(RSV_data_2[,29:ncol(RSV_data_2)], as.numeric)))
            print(paste0('X dimensions are ',dim(X_)))
            
            X_ <-scale(X_, center = TRUE, scale = TRUE)
            # remove the _Ebola, _EBV and _PPD
            if (length(which(grepl("Ebola",colnames(X_)))) != 0)
            {X_ <- X_[,-which(grepl("Ebola",colnames(X_)))] 
            X_ <- X_[,-which(grepl("EBV",colnames(X_)))]
            X_ <- X_[,-which(grepl("PPD",colnames(X_)))]}

            # generally selected parameters
            opts_sel <- list(n_trials = 100, threshold = thresh, return_count = FALSE)
            sel_features <- select_lasso_rev(X_, y_)
            # performs the lasso again
            sel_features <- select_repeat_rev(X_, y_, selector = select_lasso_rev, options = opts_sel)
            X_sel <- X_[, sel_features]
            if (length(sel_features) == 1) {new_opts_sel <- list(n_trials = 100, threshold = .2, alpha = .2, return_count = FALSE)
            sel_features <- select_repeat_rev(X_, y_, selector = select_lasso_rev, options = new_opts_sel)
            append(feature_list,sel_features)
            X_sel <- X_[, sel_features]
            if (length(sel_features) == 1) {warning('The length of the elastic net selected features is still 1')} }
            print(paste('Parameters are : ',thresh,nfold,colresponse,Time,idx))
            print(paste0('Selected features are ',sel_features))
            
            # Makes a correlation plot
            opts<-list(FDR=0.05)
            co<-correlation_network_rev(X_, sel_features, opts)
            ggsave(filename = paste0("correlation_correct",Time,responsename,featuretype[[idx]],".png"), plot = co)
            
            # saves features
            write.table(sel_features,file = paste0('LASSO_features_correct',Time,'corrected',responsename,featuretype[idx],'.txt'))
            # assigns color scheme
            if (responsename == 'Class')
            {my_colors = list(group = c(Outpatient = '#ebd034', Inpatient = '#4334eb'))}
            if (responsename == 'RSV_Type')
            {my_colors = list(group = c(A = '#de6936', B = '#ebd233'))}
            if (responsename == 'Admission_unit')
            {my_colors = list(group = c(Ward = "#ead034", Outpatient = "#ec6434", PICU = "#c71afc"))}
            # Ward = '#ebd034', PICU = '#c719fc'))}
            
            df_features <- data.frame(name = colnames(X_))
            df_features$label <- gsub(" ", " ", df_features$name)
            
            opts_plot <- list(df_features = df_features,
                              loading_alpha = 0.5,# transparency for the loadings
                              score_alpha = 0.5,# transparency for the scores
                              LV_ind = c(1,2), # which LVs to plot
                              color_features = "antigen", # according to which property (defined in df_features) the features should be color-coded
                              colors = my_colors,
                              size =3,
                              y_name = "group") 
            
            # ROPLS Scores Plot
            model <- train_ropls(X_sel, y_, options  = list(n_LV = 2))
            plt_scores <- visualize_ropls_scores(model, y_, options = opts_plot)
            ggsave(paste0('plt_scores_correct',Time,responsename,thresh,featuretype[idx],'.png'),plot = plt_scores)
            
            # Loading Bars Plot
            opts_plot$X <- X_sel
            opts_plot$y <- y_
            opts_plot$LV_ind <- 1
            opts_plot$mark_enrichment <- T
            opts_plot$colors <- my_colors
            
            plt_loadings_bar <- visualize_ropls_loadings_bar(model, options = opts_plot)
            ggsave(paste0('loadings_bar_plot_correct',Time,responsename,thresh,featuretype[idx],'.png'),plot = plt_loadings_bar)
            
            #Validation
            y_pred <- predict_ropls(model, X_sel)
            acc <- score_accuracy(y_, y_pred)
            print(paste("Performance on full data set:", round(acc, digits = 3), "accuracy"))
            append(accuracy_list,acc)
            opts_sel <- list(n_trials = 100, threshold = thresh, return_count = FALSE)
            
            select <- function(X, y) { return(select_repeat_rev(X, y, selector = select_lasso_rev, options = opts_sel)) }
            method = list(select = select, 
                          train = train_ropls,
                          predict = predict_ropls,
                          score = score_accuracy)
            opts = list(n_folds = nfold, rf_trials = 0, pt_trials = 0)
            return_vals <- validate(X_, y_, method, opts)
            print(paste('Parameters are : ',thresh,nfold,colresponse,Time,idx))
            print(paste(paste0("Performance in ",nfold," cross validation:"),round(return_vals$cv_score, digits = 2), "accuracy"))
            append(accuracy_list,return_vals$cv_score)
            
            while (i < 30) {accuracy_list[[i]] <- acc 
            accuracy_list[[i+1]] <- return_vals$cv_score
            i <- i + 1}
          }
        }
      }
    }
  }